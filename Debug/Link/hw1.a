;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32.h>
;#include <alcd.h>
;#include <stdlib.h>
;
;int number = 0;
;
;void main(void)
; 0000 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000C 
; 0000 000D 
; 0000 000E     lcd_init(16);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000F     lcd_clear();                                    // lcd initial settings
;PCODE: $00000010 VOL: 0
; 0000 0010 
; 0000 0011 
; 0000 0012     OCR1AH = 0x3D;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0013     OCR1AL = 0x09;                                  // OCR1A = ox3D09 = 15625 --> 15625 * 64 / 1000000 = 1 second
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0014 
; 0000 0015     #asm("sei");                                    // globally enable interrupts
;PCODE: $00000015 VOL: 0
	sei
;PCODE: $00000016 VOL: 0
; 0000 0016     TIMSK |= (1 << TOIE1) | (1 << OCIE1A) ;         // enable timer/counter 1 interrupt and timer/counter 1 compare matc ...
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0017 
; 0000 0018     TCCR1B = 0x0B;                                  // f(t/c) = f(IO) / 64 from prescaler || enable CTC mode and set TOP ...
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0019 
; 0000 001A 
; 0000 001B 
; 0000 001C 
; 0000 001D 
; 0000 001E }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;
;
;interrupt[TIM1_COMPA] void comparematch(void){     // interrupt happens every second
; 0000 0021 interrupt[8] void comparematch(void){
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0022 
; 0000 0023 
; 0000 0024     char number_string[10];
; 0000 0025 
; 0000 0026     itoa(number,number_string);                     // convert integer(number) to string(number_string)
;PCODE: $00000021 VOL: 0
;	number_string -> Y+0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0027 
; 0000 0028     lcd_clear();
;PCODE: $00000025 VOL: 0
; 0000 0029     lcd_puts(number_string);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002A 
; 0000 002B     number = (number + 1) % 1001;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002C 
; 0000 002D }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;
;
